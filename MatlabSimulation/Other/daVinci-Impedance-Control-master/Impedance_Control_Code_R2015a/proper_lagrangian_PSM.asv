% This script file was written in MATLAB R2012a
% This file contains code that computes the equation of motion of the 
% da Vinci PSM based on the Euler-Lagrange method. The output of the file
% is the MCG.mat file that contains the symbolic M matrix, Cqdot matrix and
% G matrix which represent the dynamics of the system. The masses and
% inertias of the system were obtained from the CAD models in the dVRK
% JHU github repository at https://github.com/jhu-dvrk/dvrk-ros/tree/master/dvrk_model/cad/PSM_CAD_Model/ToolActiveSection
%% Initialization of Variables
% clc;clear all;close all;
tic;
syms q_vec q1 q2 q3 q4 q5 q6 g real;
syms t t1(t) t2(t) t3(t) t4(t) t5(t) t6(t);
syms q1dot q2dot q3dot q4dot q5dot q6dot real;
syms t1dot(t) t2dot(t) t3dot(t) t4dot(t) t5dot(t) t6dot(t);
syms q1dotdot q2dotdot q3dotdot q4dotdot q5dotdot q6dotdot real;
syms t1dotdot(t) t2dotdot(t) t3dotdot(t) t4dotdot(t) t5dotdot(t) t6dotdot(t);
q_vec = [q1 q2 q3 q4 q5 q6].';
t_vec = [t1 t2 t3 t4 t5 t6].';
tdot_vec = [diff(t1(t),t) diff(t2(t),t) diff(t3(t),t) diff(t4(t),t) diff(t5(t),t) diff(t6(t),t)].';
tdotdot_vec = [diff(t1dot(t),t) diff(t2dot(t),t) diff(t3dot(t),t) diff(t4dot(t),t) diff(t5dot(t),t) diff(t6dot(t),t)].';
tdotsh_vec = [t1dot(t) t2dot(t) t3dot(t) t4dot(t) t5dot(t) t6dot(t)].';
tdotdotsh_vec = [t1dotdot(t) t2dotdot(t) t3dotdot(t) t4dotdot(t) t5dotdot(t) t6dotdot(t)].';
qdot_vec = [q1dot q2dot q3dot q4dot q5dot q6dot].';
qdotdot_vec = [q1dotdot q2dotdot q3dotdot q4dotdot q5dotdot q6dotdot].';

%% DH Parameters
% The Denavit-Hartenberg parameters of the robot are defined symbolically 
% in the getPSM_DH() function.
DH = getPSM_DH();
%% Forward Kinematics
% Calculating the intermediate transformation matrices based on DH
% parameters
T_fin = eye(4);
for i = 1:size(DH,1)
    T(:,:,i) = dh2mat(DH(i,1),DH(i,2),DH(i,3),DH(i,4));
    T_fin = T_fin*T(:,:,i);
    Ti(:,i) = T(1:3,4);
    switch i
        case 2
            T0q1 = T_fin;
            P0q1 = T0q1(1:3,4);
            R0q1 = T0q1(1:3,1:3);
        case 4
            T0q2 = T_fin;
            P0q2 = T0q2(1:3,4);
            R0q2 = T0q2(1:3,1:3);
        case 7
            T0q3 = T_fin;
            P0q3 = T0q3(1:3,4);
            R0q3 = T0q3(1:3,1:3);
        case 8
            T0com4 = T_fin;
            P0com4 = T0com4(1:3,4);
            R0com4 = T0com4(1:3,1:3);
        case 10
            T0q4 = T_fin;
            P0q4 = T0q4(1:3,4);
            R0q4 = T0q4(1:3,1:3);
        case 14
            T0com5 = T_fin;
            P0com5 = T0com5(1:3,4);
            R0com5 = T0com5(1:3,1:3);
        case 12
            T0q5 = T_fin;
            P0q5 = T0q5(1:3,4);
            R0q5 = T0q5(1:3,1:3);
        case 20
            T0com6 = T_fin;
            P0com6 = T0com6(1:3,4);
            R0com6 = T0com6(1:3,1:3);
        case 17
            T0q6 = T_fin;
            P0q6 = T0q6(1:3,4);
            R0q6 = T0q6(1:3,1:3);
        case 23
            T0tip = T_fin;
            P0tip = T0tip(1:3,4);
            R0tip = T0tip(1:3,1:3);
        case 25
            T0com7 = T_fin;
            P0com7 = T0com7(1:3,4);
            R0com7 = T0com7(1:3,1:3);
    end
            
end
P_fin = T_fin(1:3,4); %Extracting only the x-y-z position from T matrix

%% Definition of Masses & Inertias
% Only links 4 through 7 are considered for the modeling of the PSM since
% joints 1 and 2 have a remote center on link 4 and hence, links 1,2 and 3
% do not come into play. The movement resulting from actuations of 
% joints 1 and 2 act about the remote center in the actual robot and the
% modeling for this simulation incorporates the same thus eliminating the
% need to model links 1,2,3. However, if this is to be implemented on the
% real robot, links 1,2 and 3 have to be modeled and the dynamics need to
% be calculated accordingly. The masses and inertia matrices that follow
% were obtained from the github repository as indicated in the header
% comments.
m4 = 243.10/1000; %kilograms
I4 = 1e-9.*[1434186.97        -242.92      1440.91;...
               -242.92     1470723.58     30338.11;...
               1440.91       30338.11     99631.43];
m5 = 0.33/1000; %kilograms
I5 = [3        0      0;...
      0     3.39      0;...
      0        0   3.07];
m6 = 0.34/1000; %kilograms
I6 = 1e-9.* [3.35        0      0.04;...
                0     6.08         0;...
             0.04        0      4.60];
m7 = 0.16/1000; %kilograms
I7 = 1e-9.* [3.12        0         0;...
                0     3.26         0;...
                0        0      0.40];
  
%% Lagrangian Calculation

% Calculate Potential Energy
PE_m4 = m4*g*P0com4(3);
PE_m5 = m5*g*P0com5(3);
PE_m6 = m6*g*P0com6(3);
PE_m7 = m7*g*P0com7(3);
% Total Potential Energy of all masses
P = PE_m4 + PE_m5 + PE_m6 + PE_m7;

% Calculate velocities by differentiating positions with respect to time
P0m4 = subs(P0com4,q_vec,t_vec);
v0m4 = simplify(subs(diff(P0m4,t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
P0m5 = subs(P0com5,q_vec,t_vec);
v0m5 = simplify(subs(diff(P0m5,t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
P0m6 = subs(P0com6,q_vec,t_vec);
v0m6 = simplify(subs(diff(P0m6,t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
P0m7 = subs(P0com7,q_vec,t_vec);
v0m7 = simplify(subs(diff(P0m7,t),[tdot_vec,t_vec],[qdot_vec,q_vec]));

% Calculate Inertia Matrices by the formula R*I*R'
I0m4 = R0com4*I4*R0com4.';
I0m5 = R0com5*I4*R0com5.';
I0m6 = R0com6*I4*R0com6.';
I0m7 = R0com7*I4*R0com7.';

% Calculate required R_dot by differentiating rotation matrices with
% respect to time
R0com4dot = simplify(subs(diff(subs(R0com4,q_vec,t_vec),t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
R0com5dot = simplify(subs(diff(subs(R0com5,q_vec,t_vec),t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
R0com6dot = simplify(subs(diff(subs(R0com6,q_vec,t_vec),t),[tdot_vec,t_vec],[qdot_vec,q_vec]));
R0com7dot = simplify(subs(diff(subs(R0com7,q_vec,t_vec),t),[tdot_vec,t_vec],[qdot_vec,q_vec]));

% Calculate R_dot*R'
R4dot_trans = simplify(R0com4dot*R0com4.');
R5dot_trans = simplify(R0com5dot*R0com5.');
R6dot_trans = simplify(R0com6dot*R0com6.');
R7dot_trans = simplify(R0com7dot*R0com7.');

% Separate out angular velocity terms from the above skew symmetric
% matrices
omega0m4 = [-R4dot_trans(2,3) R4dot_trans(1,3) -R4dot_trans(1,2)].';
omega0m5 = [-R5dot_trans(2,3) R5dot_trans(1,3) -R5dot_trans(1,2)].';
omega0m6 = [-R6dot_trans(2,3) R6dot_trans(1,3) -R6dot_trans(1,2)].';
omega0m7 = [-R7dot_trans(2,3) R7dot_trans(1,3) -R7dot_trans(1,2)].';

% Calculate Kinetic Energy
KE_m4 = simplify(1/2*m4*(v0m4.'*v0m4) + 1/2*omega0m4.'*I0m4*omega0m4);
KE_m5 = simplify(1/2*m5*(v0m5.'*v0m5) + 1/2*omega0m5.'*I0m5*omega0m5);
KE_m6 = simplify(1/2*m6*(v0m6.'*v0m6) + 1/2*omega0m6.'*I0m6*omega0m6);
KE_m7 = simplify(1/2*m7*(v0m7.'*v0m7) + 1/2*omega0m7.'*I0m7*omega0m7);
% Total Kinetic Energy
K = simplify(KE_m4 + KE_m5 + KE_m6 + KE_m7);

% Lagrangian = KineticEnergy - PotentialEnergy
L = simplify(K - P);

% Temporary variables to arrive at the equation of motion from the
% Lagrangian.

% \frac{\partial L}{\partial qdot}
e1 = simplify(diff(L,q1dot));
e2 = simplify(diff(L,q2dot));
e3 = simplify(diff(L,q3dot));
e4 = simplify(diff(L,q4dot));
e5 = simplify(diff(L,q5dot));
e6 = simplify(diff(L,q6dot));

% substitute time dependence into above equation
e1 = subs(e1,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);
e2 = subs(e2,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);
e3 = subs(e3,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);
e4 = subs(e4,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);
e5 = subs(e5,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);
e6 = subs(e6,[q_vec,qdot_vec],[t_vec,tdotsh_vec]);

% differentiate with respect to time.
% d/dt*(\frac{\partial L}{\partial qdot})
e1 = subs(diff(e1,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);
e2 = subs(diff(e2,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);
e3 = subs(diff(e3,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);
e4 = subs(diff(e4,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);
e5 = subs(diff(e5,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);
e6 = subs(diff(e6,t),[t_vec,tdotsh_vec,tdotdot_vec],[q_vec,qdot_vec,qdotdot_vec]);

% \frac{\partial L}{\partial q}
f1 = diff(L,q1);
f2 = diff(L,q2);
f3 = diff(L,q3);
f4 = diff(L,q4);
f5 = diff(L,q5);
f6 = diff(L,q6);

% Calculate torques vector tau
tau1 = simplify(e1-f1);
tau2 = simplify(e2-f2);
tau3 = simplify(e3-f3);
tau4 = simplify(e4-f4);
tau5 = simplify(e5-f5);
tau6 = simplify(e6-f6);

% Separate out coefficients of q_double_dot and g
[t1,q1] = coeffs(tau1,[qdotdot_vec.',g]);
[t2,q2] = coeffs(tau2,[qdotdot_vec.',g]);
[t3,q3] = coeffs(tau3,[qdotdot_vec.',g]);
[t4,q4] = coeffs(tau4,[qdotdot_vec.',g]);
[t5,q5] = coeffs(tau5,[qdotdot_vec.',g]);
[t6,q6] = coeffs(tau6,[qdotdot_vec.',g]);

save('taus',